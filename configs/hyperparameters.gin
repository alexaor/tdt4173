## Hyperparameters used in our different machine learning models

## Import the python methods files to access the classes
import methods.models
import methods.dnn
import gin.tf.external_configurables


## AdaBoost Classifier - Hyperparameters
ada_boost.learning_rate = 0.8             # float, shrinks the contribution of each classifier
ada_boost.n_estimators = 70             # int, max number of estimators (trees in the forest) at which boosting is terminated

## Decision Tree Classifier - Hyperparameters
decision_tree.criterion = 'entropy'     # {'gini', 'entropy'}, the quality of the split
decision_tree.max_depth = 6             # int, the maximum depth of the tree, default at None
decision_tree.splitter = 'best'         # {'best', 'random'}, strategy on how the node split is chosen
decision_tree.max_features = None       # {'None', 'auto', 'sqrt', 'log2'}, the number of features to consider when splitting
decision_tree.min_samples_split = 3

## Random forest Classifier - Hyperparameters
random_forest.n_estimators = 100         # int, Number of trees in the forest
random_forest.criterion = 'entropy'        # {“gini”, “entropy”}, function to measure the quality of a split
random_forest.max_depth = 12             # int, maximum depth of the tree
random_forest.max_features = "auto"     # {“auto”, “sqrt”, “log2”}, max number of features considered for splitting a node
random_forest.min_samples_split = 2


## Deep Neural Network - Hyperparameters
# Parameters to the model creation
DNN.dropout = 0.2                               # float, rate of how many input units which is set to 0
# Parameters to the fitting
DNN.epochs = 20                                 # Number of training epochs
DNN.batch_size = 32                            # int, Number of samples per gradient update
DNN.steps_per_epoch = None                      # int, Total number of steps before one epoch is finished and starting the next epoch. steps_per_epoch = input // batch size
DNN.validation_steps = None                     # int, Total number of steps before stopping when performing validation at the end of every epoch.
DNN.validation_split = 0.33
# Parameters to the compilation
DNN.optimizer_cls = @tf.train.RMSPropOptimizer()   # the optimization function
DNN.metrics = ['accuracy', 'mse']               # metrics to review when training
DNN.loss = 'binary_crossentropy'                # default None, the loss function

tf.train.RMSPropOptimizer.learning_rate = 0.001
tf.train.AdamOptimizer.learning_rate = 0.0005     # Learning rate to the optimizer

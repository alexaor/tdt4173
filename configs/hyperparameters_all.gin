## Hyperparameters used in our different machine learning models

## Import the python methods files to access the classes
import methods.models
import gin.tf.external_configurables


## AdaBoost Classifier - Hyperparameters
ada_boost.learning_rate = 1             # float, shrinks the contribution of each classifier
ada_boost.n_estimators = 50             # int, max number of estimators (trees in the forest) at which boosting is terminated

## Decision Tree Classifier - Hyperparameters
decision_tree.criterion = 'entropy'     # {'gini', 'entropy'}, the quality of the split
decision_tree.max_depth = 6             # int, the maximum depth of the tree, default at None
decision_tree.splitter = 'best'         # {'best', 'random'}, strategy on how the node split is chosen
decision_tree.max_features = None       # {'None', 'auto', 'sqrt', 'log2'}, the number of features to consider when splitting
decision_tree.min_samples_split = 3
decision_tree.class_weight = {0:1, 1: 3}

## Random forest Classifier - Hyperparameters
random_forest.n_estimators = 100         # int, Number of trees in the forest
random_forest.criterion = 'entropy'        # {“gini”, “entropy”}, function to measure the quality of a split
random_forest.max_depth = 10             # int, maximum depth of the tree
random_forest.max_features = "auto"     # {“auto”, “sqrt”, “log2”}, max number of features considered for splitting a node
random_forest.min_samples_split = 2
random_forest.class_weight = {0:1, 1: 3}

## Deep Neural Network - Hyperparameters
# Parameters to the model creation
dnn.dropout = 0.3                               # float, rate of how many input units which is set to 0
# Parameters to the fitting
dnn.epochs = 200                                 # Number of training epochs
dnn.batch_size = 60                            # int, Number of samples per gradient update
dnn.validation_split = 0.33
# Parameters to the compilation
dnn.optimizer_cls = @tf.train.AdamOptimizer()   # the optimization function
dnn.loss = 'binary_crossentropy'                # default None, the loss function
dnn.class_weight = {0:1, 1: 3}

tf.train.RMSPropOptimizer.learning_rate = 0.0001
